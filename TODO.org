* Multiple people                                                  :noexport:
*** TODO Implementations required
    + Shane Kerr and Peter Spacek pointed out new dnsop convention is to
      have implementations.

* Shane Kerr's review

    Dear DNS colleagues,

    I definitely agree with George that last call seems a bit
    premature. As he points out, section 6 is a large open question. We
    need to either change EDNS behavior to allow an unsolicited EDNS
    option in a response or change this draft to include an appropriate
    EDNS option when it queries. Personally I think the draft should
    specify that the query should include an empty version of this EDNS
    option to indicate support (this is actually helpful, as it doesn't
    make too much sense sending back extra information that clients will
    ignore, decades of BIND adding useless ADDITIONAL section data
    notwithstanding).

*** DONE Plus there's also this odd bit of stray text laying around:
    :LOGBOOK:  
    - State "DONE"       from ""           [2018-12-17 Mon 16:09]
    :END:      

     Here is a reference to an "external" (non-RFC / draft) thing:
     ([IANA.AS_Numbers]).  And this is a link to an
     ID:[I-D.ietf-sidr-iana-objects].

     + Result: removed

*** DONE Also is this correct:
    :LOGBOOK:  
    - State "DONE"       from ""           [2018-12-17 Mon 16:09]
    :END:      

       	 o  OPTION-LENGTH, 2 octets ((defined in [RFC6891]) contains the
            length of the payload (everything after OPTION-LENGTH) in octets
            and should be 4.

      If I am correct there are at least 6 octets after the OPTION-LENGTH
      and possibly more if EXTRA-TEXT is present.

      + Result: fixed text to say "OPTION-LENGTH, 2 octets ((defined
        in [RFC6891]) contains the length of the payload (everything
        after OPTION-LENGTH) in octets and should be 6 plus the length
        of the EXTRA-TEXT section (which may be a zero-length
        string)."

*** DONE Also, this text seems a bit unclear:
    :LOGBOOK:  
    - State "DONE"       from "TODO"       [2018-12-17 Mon 16:24]
    :END:      

       	 R - Retry  The R (or Retry) flag provides a hint to the receiver that
            it should retry the query, probably by querying another server.
            If the R bit is set (1), the sender believes that retrying the
            query may provide a successful answer next time; if the R bit is
            clear (0), the sender believes that it should not ask another
            server.

      The "probably by querying another server" is odd. In my mind it should
      explicitly apply to querying another server ONLY.

      + Result: that's fair.  Changed it to " it should retry the
        query to another server."

*** DONE EXTRA-TEXT and EXTRA-INFO duplication
    :LOGBOOK:  
    - State "DONE"       from "TODO"       [2018-12-17 Mon 16:11]
    :END:      

      The draft refers to EXTRA-TEXT twice, and EXTRA-INFO once which is
      presumably meant to be the same thing. 

      + Result: switched to all EXTRA-TEXT

*** DONE encoding of the EXTRA-TEXT field
    :LOGBOOK:  
    - State "DONE"       from "TODO"       [2018-12-18 Tue 10:32]
    :END:      

      In any case, I think the encoding of this field should be
      specified as either ASCII or UTF-8. I prefer UTF-8, because
      otherwise I won't be able to send back ü§Ø emoji in error messages
      (and the authors won't be able to use the üçÑ emoji that they
      clearly want).

      + Resolution: we're proposing ASCII to keep the protocol simple
        and to match TXT records.  These are not intended to be end
        user messages but rather administrative hints for operators.
        + Update <2019-01-02 Wed>: later in the mailing list, people
          agreed on UTF-8.  -- document updated

      + resulting text:

          A variable length, ASCII encoded, EXTRA-TEXT field
          holding additional textual information. It may be zero
          length when no additional textual information is
          included.


*** DONE I am not sure I agree with these recommendations:
    :LOGBOOK:  
    - State "DONE"       from "TODO"       [2018-12-18 Tue 10:33]
    :END:      

      4.1.5.  Extended DNS Error Code 5 - Unsupported DNSKEY Algorithm

       	 The resolver attempted to perform DNSSEC validation, but a DNSKEY
       	 RRSET contained only unknown algorithms.  The R flag should not be
       	 set.

      4.1.6.  Extended DNS Error Code 6 - Unsupported DS Algorithm

       	 The resolver attempted to perform DNSSEC validation, but a DS RRSET
       	 contained only unknown algorithms.  The R flag should not be set.

      This seems like a case where a stub resolver may want to try another
      full-service resolver that may support more algorithms, so perhaps the
      text "The R flag should not be set" should be removed.

      + Resolution: we agree; text changed

*** DONE How to add multiple EDE
    :LOGBOOK:  
    - State "DONE"       from "TODO"       [2018-12-20 Thu 14:53]
    :END:      

      While the draft suggests that it is possible to add multiple EDE to a
      message:

       	 o  RESPONSE-CODE, 2 octets: this SHOULD be a copy of the RCODE from
            the primary DNS packet.  When including multiple extended error
            EDNS0 records in a response in order to provide additional error
            information, the RESPONSE-CODE MAY be a different RCODE.

      It is not explicit about how this is done. If the intention is for a
      resolver to forward this back to a stub resolver, then it needs to be
      mentioned, probably in section 3, something like this. However, then
      we also need some text describing how a client behaves when presented
      with multiple EDE.

      + Tried to clean this up with new text about multiple inserts.
        Please see what you think!

*** CANCELED Implementation required

      Finally, do we have any implementations of this draft? It seems pretty
      straightforward, but I don't actually think that it's possible to
      develop interoperable code with the draft as it stands today. I
      vaguely recall that we wanted running code going forward to try to
      starve the DNS camel...

      + issue response moved to a generic multiple-people issue

* Peter Spacek
  I believe the document is not ready for multiple reasons:

*** DONE EDNS handling as mentioned elsewhere in this thread
    :LOGBOOK:  
    - State "DONE"       from "TODO"       [2018-12-18 Tue 10:38]
    :END:      

    + Response: we believe we have handled all other issues; please
      let us know if you disagree.

*** CANCELED lack of implementation reports

  With my implementer hat on, this might not be as easy to implement as we
  would like. An actual implementation might uncover various weird corner
  cases so I'm against advacing this document before there are
  implementations for *real* resolvers/DNSSEC validators.

      + issue response moved to a generic multiple-people issue

* Joe Abley

*** DONE Fix IANA registry template
    :LOGBOOK:  
    - State "DONE"       from "TODO"       [2018-12-20 Thu 14:52]
    :END:      

    >> With IANA registry requests, I may be wrong here, but I thought we had
    >> some (boilerplate?) language about how IANA is asked to operate the
    >> registry: what criteria judge acceptance. Is it like the OID and
    >> basically open (hair oil) slather, or is it only at WG RFC documented
    >> request?
    > 
    > If there is a better template, we'd certainly like to hear it.

    RFC 8126 contains exactly the guidance you're looking for. When
    creating a new registry you not only need to specify the schema and
    the initial rows to populate the new table with (as you started in
    section 5.2, although the formatting of the table is a bit
    horrifying); you also need to specify the name of the registry,
    required information for future additions and the registration policy.

    Happy to contribute some text if that seems useful.

    + Response: cleaned up and tried to make it pretty

* Donald Eastlake

I like the Extended Error Code using EDNS idea. This was effectively
what was done with TSIG and TKEY that have an expanded Error field
inside the RR. However:

*** DONE two dimensional table is unneeded 
    :LOGBOOK:  
    - State "DONE"       from "TODO"       [2018-12-18 Tue 11:36]
    :END:      

     >> I don't see any reason for the complex two-dimensional table to
    new error codes. Given that 16 bits is available for "INFO-CODE"
    (which I think, to follow the DNS nomenclature used in TSIG and TKEY,
    should just be called "Error"), I don't see why these extended error
    codes, which provide more detail beyond the top level Error code
    value, can't be from the single unified DNS error code table. That
    way, wherever you get a DNS Error code (from RCODE or the EDNS
    extended error field or the TSIG or TKEY error fields or wherever,
    there is just one table to look it up in. For example, you could
    Reserve 4096 through 8191 for this purpose, which is probably enough
    values :-)

    + response: this was discussed multiple times in previous working
      group meetings and on the mailing list, and the general
      consensus was to use a multiple-lookup table.  Continue reading
      into the next issue for further information on a decent compromise:

*** DONE rcodes are only 4 bits
    :LOGBOOK:  
    - State "DONE"       from "TODO"       [2018-12-20 Thu 14:53]
    :END:      

     >> Since RCODEs are 4 bits, I don't see why a 16-bit
     RESPONSE-CODE field is required. Even if you want to be able to
     provide additional information for the 12-bit error codes of
     RCODE as extended by base EDNS, there is still enough room in the
     previous 16-bit word which has 15 unused bits in it. Just move
     the RESPONSE-CODE up into the previous word

     + Response: you're right about the 4 bits of course.  Somehow our
       initial remembrance of this got lost in the double table
       issue.  So to simplify both this issue, and the previous, we've
       decided to merge the two codes into a 4-bit RCODE value and a
       12-bit INFO-CODE value.  This actually allows implementers to
       treat it easily as two codes, if they'd prefer, or a single
       16b-bit code if they'd rather handle it that way while
       preserving interoperability between everything.

*** DONE 
    :LOGBOOK:  
    - State "DONE"       from ""           [2019-01-02 Wed 14:19]
    :END:      
    His response to the above:

    + While it is not exactly what I would want, I am satisfied with the
    changes below and consider my comments resolved.
* Vladimir Cunat

*** DONE unsupported algorithm issues
    :LOGBOOK:
    - State "DONE"       from              [2019-01-07 Mon 12:31]
    :END:
    Hello!

    Unsupported algorithms (4.1.5 + 4.1.6):
    I'm a bit confused why these conditions are meant for SERVFAIL.¬† Has
    something changed?
    https://tools.ietf.org/html/rfc4035#section-5.2 (paragraph "If the
    validator does not support...")

    --Vladimir (knot-resolver)

    + Response: that's correct...  and now fixed by moving to NOERROR
* Stephane Bortzmeyer

Now, the problems:

*** DONE It seems to me that this draft is mostly for resolvers, most planned
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2019-03-10 Sun 18:44]
    :END:
  extended codes are useless for authoritative servers (except may be
  REFUSED/Lame?).

  I suggest to make that clear in the introduction:

  These extended error codes are specially useful for resolvers, to
  return to stub resolvers or to downstream resolvers. Authoritative
  servers MAY use them but most error codes would make no sense for
  them.

  + Warren agrees

  + Results: added, but modified to distinguish that you're really
    referring to receiving codes, not sending them (auth servers may
    need to send them, eg the block/prohibited one)

*** DONE ref issue
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2019-03-10 Sun 18:44]
    :END:
  > Unless a protective transport mechanism (like TSIG [RFC2845] or TLS
  > [RFC8094])

  Why 8094, which does not have even one implementation, instead of
  7858?

  + warren: oversight
  + results: added 7858

*** DONE sig expired
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2019-03-10 Sun 18:45]
    :END:
  > 4.2.3.  SERVFAIL Extended DNS Error Code 3 - Signature Expired
  >
  >   The resolver attempted to perform DNSSEC validation, but the
  >   signature was expired.

  I suggest to replace "the signature was expired" by "a signature in
  the validation chain was expired".

  Rationale: which signature? What if a DS at the parent is sign with an
  expired signature?

  + Warren: LTGM
  + Results: done

*** DONE dnskey missing text
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2019-03-10 Sun 18:46]
    :END:
  > 4.2.5.  SERVFAIL Extended DNS Error Code 5 - DNSKEY missing
  >
  >   A DS record existed at a parent, but no DNSKEY record could be found
  >   for the child.

  I suggest to replace "no DNSKEY record could be found for the child"
  by "no DNSKEY record for this specific key could be found for the
  child".

  Rationale : the current text seems to imply this code is only when
  there is no DNSKEY at all.

  + Warren: LTGM

  + Brian disagrees

  + Michael Sheldon also disagrees and suggests "No supported matching
    DNSKEY record could be found for the child"

  + Result: took Michael's text

*** DONE blocked
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2019-03-10 Sun 18:52]
    :END:
  > 4.4.1.  NXDOMAIN Extended DNS Error Code 1 - Blocked
  >
  >   The resolver attempted to perfom a DNS query but the domain is
  >   blacklisted due to a security policy.  The R flag should not be set.

  The last sentence is touchy. If a stub is configured with two
  resolvers, and one is fast but known for lying in some cases that you
  disagree with, you may ask a cookie from the other parent (no, resolver).

  + Warren agrees the bit should be flipped.
  + Result: flipped

*** DONE blocked 2
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2019-03-10 Sun 18:59]
    :END:
  > 4.4.1.  NXDOMAIN Extended DNS Error Code 1 - Blocked
  >
  >   The resolver attempted to perfom a DNS query but the domain is
  >   blacklisted due to a security policy.

  I tend to think it would be a good idea to separate the case where the
  policy was decided by the resolver and the case where the policy came
  from outside, typically from the local law (see RFC 7725 for a similar
  case with HTTP).

  Rationale: in the first case (local policy of the resolver), the user
  may be interested in talking with the resolver admin if he or she
  disagrees with the blocking. In the second case, this would be useless.

  + Stephane adds:

    I really think it is important to make the difference between:

    * I blocked your request because that's _my_ policy
    * I blocked your request because I'm compelled to do so, don't
      complain, it would be useless.

  + Jim Reed: why?  from the client's perspective no diff

  + Stephane: cause it indicates if you should call someone or you
    can't affect change

  + Result: Seems like rough concensus to add, so i did.

*** DONE forged answer
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2019-03-10 Sun 19:17]
    :END:
  Otherwise, I suggest to add an error code:

  NOERROR Extended DNS Error Code 3 - Forged answer

     For policy reasons (legal obligation, or malware filtering, for
     instance), an answer was forged.  The R flag should not be set.

  Rationale: there is "NXDOMAIN Extended DNS Error Code 1 - Blocked" but
  policy-aware resolvers (lying resolvers, in plain english) do not
  always forge NXDOMAIN, they can also forge A or AAAA answers.

  See also the issue just before, about the need to differentiate
  resolver policy from "upper" policy, law, for instance.

  + Warren doesn't like forgged and wants a better word

  + Stephane: "substituded answer" maybe?

  + Result: took forged as I don't like any suggested replacement yet

*** DONE new code for no reachable authorities
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2019-03-10 Sun 19:19]
    :END:

    Ooops, I forgot one:

    SERVFAIL Extended DNS Error Code 8 - No reachable authority 

       The resolver could not reach any of the authoritative name servers
       (or they refused to reply).  The R flag should be set.

    Rationale: in draft -04, all SERVFAIL extended error codes are for
    DNSSEC issues. In my experience, SERVFAIL happens also (and quite
    often) for routing issues (most zones have all their authoritative
    name servers in only one AS, sometimes even one prefix or, worse, one
    rack).

    We set the R flag because another resolver may not have the same
    routing issues, BGP not being consistent between all sites.

    True, an extended error code could be added after the RFC is
    published, through "Specification required" but 1) it is easier to do
    it now 2) it gives to the people who will implement the RFC a wider
    view of the possible uses.

    + Result: added

* Petr Spacek

  Prelim: first of all I believe this is useful and suppor the work, but still

*** TODO implementations needed

    needs more work *and implementation experience* before going to LC.

    Here is couple specific changes to version 04.

    + results: I believe the WG agrees, and the draft will not likely
      progress until implementations exist.

     --- Minor changes/clarifications ---

*** DONE reserved bits
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2019-03-10 Sun 21:22]
    :END:

     > 2.  Extended Error EDNS0 option format
     >    o  The RESERVED bits, 15 bits: these bits are reserved for future
     >       use, potentially as additional flags.  The RESERVED bits MUST be
     >       set to 0 by the sender and MUST be ignored by the receiver.

     IMHO "SHOULD be ignored" is asking for trouble. We just went through DNS
     flag day to clean up implementations which insisted on some fields being
     zero. Can we please use this instead?
     set to 0 by the sender and MUST be ignored by the receiver.

     + Result: that make sense. Done

*** DONE EDNS option vs OPT Pseudo-RR
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2019-03-11 Mon 00:32]
    :END:

     > 3.  Use of the Extended DNS Error option
     >    The Extended DNS Error (EDE) is an EDNS option.  It can be included
     >    in any response (SERVFAIL, NXDOMAIN, REFUSED, etc) to a query that
     >    includes an EDNS option.

     Why "EDNS option" (at very end of the sentence) and not "OPT Pseudo-RR"?
     AFAIK it is perfectly fine to send EDNS0 OPT without any options inside.
     Proposed text (only the last line was changed):
        The Extended DNS Error (EDE) is an EDNS option.  It can be included
        in any response (SERVFAIL, NXDOMAIN, REFUSED, etc) to a query that
        includes OPT Pseudo-RR [RFC 6891].

     + Results: accepted; thanks for the text.

*** DONE wording issues with the response-code field text
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2019-03-11 Mon 14:59]
    :END:
     > 3.2.  The RESPONSE-CODE field
     >    This 4-bit value SHOULD be a copy of the RCODE from the primary DNS
     >    packet.  Multiple EDNS0/EDE records may be included in the response.
     >    When including multiple EDNS0/EDE records in a response in order to
     >    provide additional error information, other RESPONSE-CODEs MAY use a
     >    different RCODE.
     This paragraph worries me for multiple reasons:

      0) Terminology: EDE is an EDNS option, not record!
      a) If I am an implementer, in what cases I might want to go against
              "4-bit value SHOULD be a copy of the RCODE"?
      b) Terminology: Where is a definition of "primary DNS packet"?
      c) When I read this now, many months after the initial draft, I have
              trouble understanding logic why we are duplicating RCODE here. There
              might be a good reasons but we need to state them explicitly otherwise
              it will get ignored (or misunderstood).

              Unfortunatelly I have trouble understanding intent behind this
              description so I'm not able to draft a better text.

      + Response: 

      We'll work on the wording, and I can hopefully address your
      issue with the lack of clarity with the text and I thank you for
      pointing out that it's not clear.

      In the past, the WG has discussed (more than once) whether to
      and how to divide up the error code range.  There are some
      slides from past IETF meetings, as well as past conversations on
      the mailing list (see the conversation with Donald Eastlake, for
      example).  A few thoughts that came out of the discussions
      centered around multiple points:

      - the desire to include an organized set of error codes grouped
        by RCODE
      - most of the time, the extended error codes would be directly
        related to a particular RCODE (you found an exception)
      - There was a desire to include multiple extended error codes
        within a response, and sometimes it may be beneficial to
        return an error code associated with another RCODE as a
        supplemental error code.
      - If two RCODEs needed a similar extended error, there is no
        reason you can't create two separate (likely identical)
        extended error codes attached to two RCODE values.
      - Packing it all into a single 16-bit integer/short width field
        meant implementations could treat the combination as a
        double-lookup table if they'd prefer, or as a single 16-bit
        error code and it should work either way, providing
        implementations greater flexibility.        

      Hopefully that makes sense?  I've added your new proposed stale
      codes, as mentioned below.

      I've changed the text for RESPONSE-CODE and INFO-CODE in order
      to hopefully help.  I'd love your thoughts and suggestions for
      improvements though.

*** NOCHANGE why an R flag in unsupported key/ds

     > 4.1.1.  NOERROR Extended DNS Error Code 1 - Unsupported DNSKEY Algorithm
     > 
     >    The resolver attempted to perform DNSSEC validation, but a DNSKEY
     >    RRSET contained only unknown algorithms.  The R flag should be set.
     > 
     > 4.1.2.  NOERROR Extended DNS Error Code 2 - Unsupported DS Algorithm
     > 
     >    The resolver attempted to perform DNSSEC validation, but a DS RRSET
     >    contained only unknown algorithms.  The R flag should be set.

     Why R flag? This is not an error, resolution suceeded, and there is
     nothing to retry. I propose change both cases to
     "The R flag should not be set."

     + Stephane answered on list with this same answer as mentioned below

     + Answer: Because other resolvers may understand DS and DNSKEY
       algorithms.  So the client (stub resolver) should keep trying.

*** DONE indeterminate should be NOERROR
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2019-03-10 Sun 22:48]
    :END:

     > 4.2.2.  SERVFAIL Extended DNS Error Code 2 - DNSSEC Indeterminate
     > 
     >    The resolver attempted to perform DNSSEC validation, but validation
     >    ended in the Indeterminate state.  The R flag should not be set.

     This should be in NOERROR category.

     AFAIK Indeterminate state is not an error, it is most likely a
     configuration choice on the resolver. E.g. DNSSEC-validating resolver
     running without any trust anchor is in Indeterminate state.

     + Result: You're right, it should be (according to 4033).


     --- New code points ---

     I propose to add couple more codes:

*** DONE new code: NSEC missing
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2019-03-10 Sun 22:53]
    :END:
     + SERVFAIL Extended DNS Error Code 8 - NSEC Missing
        The resolver attempted to perform DNSSEC validation, but the
        requested data were missing and covering NSEC was not provided.
        RETRY=0

     + status: good idea and added.  I set the retry bit, though, as
       another resolver may not have the same issues, or may have NSEC
       data cached.

*** DONE new code: Cached error
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2019-03-10 Sun 23:10]
    :END:

     + SERVFAIL Extended DNS Error Code 9 - Cached Error
        The resolver has cached SERVFAIL for this query.
        RETRY=1
     Often the SERVFAIL comes from cache which is unlikely to contain
     specific error details, but it is still useful to distinguish "proper"
     cached SERVFAIL from other weird errors like running out of file
     descriptors etc. Info text could contain remaining TTL ...

     + status: added

*** DONE new code: server not ready
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2019-03-10 Sun 23:10]
    :END:
     + SERVFAIL Extended DNS Error Code 10 - Server Not Ready
         Server is not up and running (yet). RETRY=1

     + status: added

*** DONE new code: depricated
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2019-03-10 Sun 23:30]
    :END:

     + NOTIMP Extended DNS Error Code 1 - Deprecated
     Requested operation or query is not supported because it was deprecated.
     Retrying request elsewhere is unlikely to yield any other results.
     RETRY=0
     Intended use:
     - OPCODE=IQUERY
     - OPCODE=QUERY QTYPE={ANY, RRSIG, MAILA, MAILB} etc.

     + status: Added.   Was tempted to set R=1 because other servers
       may support it, but the reality is that if its deprecated it
       shouldn't be used at all.

     --- More adventurous proposals ---
*** new flags 

     a) Two more bits to implement "advice for user" (longer explanation can
     be found in archives
     https://mailarchive.ietf.org/arch/msg/dnsop/b3wtVj_aWm24PXyHr1M9NMj3LJ0)

     I believe this will make the draft way more useful for everyone and not
     just geeks.

     Proposed addition to text:

     > 2.  Extended Error EDNS0 option format
           +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
        4: | R | N | F |                  RESERVED                         |
           +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
proposal
***** NOCHANGE NEAR flag

        o  The NEAR flag, 1 bit; the NEAR bit (N) indicates a flag defined
           for use in this specification.

***** NOCHANGE FAR flag

        o  The FAR flag, 1 bit; the FAR bit (F) indicates a flag defined
           for use in this specification.

     > 3.  Use of the Extended DNS Error option

     3.2.  The N (Near) flag   The N (Near) flag indicates that the error
     reported is likely caused
        by conditions "near" the sender. Value 1 is a hint for user interface
        that user should contact administrator responsible for local DNS.

        For example, an DNS resolver running on CPE will set N=1 in its
        error responses if it detects that all queries to upstream DNS
        resolver timed out. This likely indicates a link problem and must be
        fixed locally.

        Another example is an DNSSEC-validator which detects that query
        ". IN NS" fails DNSSEC validation because signature is expired
        or not yet valid. This most likely indicates misconfigured system
        time and needs to investigated and fixed locally.


     3.3. The F (Far) flag
        The F (Far) flag indicates that the error reported is likely caused
        by conditions on the "far" end, i.e. typically authoritative side or
        upstream forwarder. Value 1 is a hint for user interface to display
        message suggesting user to contact operator of the "far end" because
        it is unlikely that local operator can fix the problem.

        For example, an DNS resolver might set F=1 if all authoritative
        servers for a given domain are lame.


***** NOCHANGE Response to both:     

      These seem interesting on the face, and potentially useful for
      receivers as you indicate.  However, they also seem subjective
      and hard to be deterministic about when and how to set them.
      Additionally, most errors should already give a hint as to
      whether a given error is near or far based on the error itself
      (even better hints might be put into the EXTRA-TEXT field).

      I'd (we'd) love to hear other WG member opinions on this subject.

*** NOCHANGE optional TTL to the option

     b) Another thing to consider is adding optional TTL value to EDE option.
     E.g. there is no point in retrying the query again and again until bogus
     response is cached. It is much better to display error message "try
     again in 10 seconds, if the problem persists call X" than just "try again".

     What do you think?

     + Result (Wes): So, I think this adds too much complexity to the
       system that we're otherwise trying to keep simple.  If
       particular errors are likely to be retried successfully after a
       certain period of time, text could be added to the error
       descriptions to hint at that instead.  Otherwise we're adding
       another layer of caching, which spells a lot more code I'd think.

*** DONE answer with stale data
    :LOGBOOK:
    - State "DONE"       from "NOCHANGE"   [2019-03-11 Mon 14:38]
    :END:

    Yet another code proposal:
    * answer with stale data

       The resolver was unable to resolve answer within its time limits and
       decided to answer with stale data instead of answering with an error.
       This is typically caused by problems on authoritative side, possibly
       as result of an DoS attack. Retrying is likely to cause load and not
       yield a fresh answer, RETRY=0.

    Here is a problem that this code point is applicable to NOERROR as well
    as NXDOMAIN answers so I'm not sure how to categorize it. This
    reinforces my unanswered question why the draft proposes to copy RCODE
    into EDE.

    + Result: Added two codes, one per RCODE, per discussion above.


* March 2019 - July 2019

*** Puneet Sood

My comments on the latest version.

General: Thanks for writing this - it provides useful information for
our public DNS resolver implementation.

***** NOCHANGE > Section 1. Introduction and background
      > Para 4. "Authoritative servers MAY parse and use them ..."
      Comment: Why talk about auth servers parsing this since this field is
      only meant to be present in responses?

      + Response: because we are trying to specify what an
        authoritative server *should* do when it receives one, even if
        it doesn't expect them.  IE, the DNS protocol doesn't prohibit
        clients from sending them so we should at least mention that
        servers should be prepared to receive them (even if useless).

***** TODO > Section 3.1 The R (retry) flag
       > Para  2. "implementations may receive EDE codes that it does not understand.
       >   The R flag allows implementations to make a decision as to what to do
       >   if it receives a response with an unknown code - retry or drop the
       >   query."

       Comment: It is unclear what should be done if a response contains
       multiple EDE options and the R flag value is different across
       them.

       + Response: good question.

***** TODO multiple EDE vs single

       Comment: On a related note, what is the reasoning for allowing
       multiple instance of the EDE option in a response versus encoding all
       the (Response-CODE, INFO-CODE, EXTRA-TEXT) tuples in a single EDE
       option? A single EDE option would avoid having different values for
       the R flag and any new flag in the future. 16-bit length field means
       that total size of all EDE options should fit in a single option.

***** DONE > Section 4.1.3 and 4.1.3.1 NOERROR Extended DNS Error Code 3 - Stale Answer
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2019-08-02 Fri 08:58]
      :END:
       Comment: 4.1.3.1 should be 4.1.3?

       + Response: I (Wes) just rewrote that section and ensured
         everything is consistent.  Thanks for the catch though.

***** TODO  DNSSEC bit
       > Section 4.2 INFO-CODEs for use with RESPONSE-CODE: SERVFAIL(2)
       Comment: There are a number of INFO-CODEs here for DNSSEC failures.
       Over time it will be extra work for implementations to stay up to date
       with new INFO-CODEs added for DNSSEC failures. The R bit signals
       whether a resolution should be retried. Do we want also want a bit for
       signalling DNSSEC validation failures? Only needed if some DNSSEC
       related behavior needs to be different from the R bit value.

***** NOCHANGE dnssec protection opts
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2019-08-02 Fri 09:00]
      :END:
       > Section 6. Security Considerations
       > Para 2: "but until we live in
       >   an era where all DNS answers are authenticated via DNSSEC or other
       >   mechanisms, there are some tradeoffs."
       Comment: Not clear how DNSSEC would help here since the OPT RR is not
       protected by any DNSSEC mechanism.

       + Response: Yes, that's true.  But the sentence is talking
         generically, and refers to "other mechanisms" too...  DNSSEC
         won't help with opt codes, you're right.  But I don't think
         that was the point of the sentence.  If you have specific
         text you'd like to propose, I'd love to see it!

***** WONTDO > Appendix A.
       Editorial: Missing diff summaries for new versions.

       + Response: very true.  Sigh.  I'm (Wes) horrible at
         remembering to write those, and I never put them in my drafts
         in the first place.  With the advent of online diffs I don't
         find them as useful either.  Since we're nearing last call
         (again), I'll likely not try to go back and retrofit them.  

*** Stephane Bortzmeyer

       At the IETF 104 hackathon in Prague, Vladim√≠r ƒåun√°t and myself
       implemented it in the Knot resolver
       <https://www.knot-resolver.cz/>. You can see the result in the git
       merge request
       <https://gitlab.labs.nic.cz/knot/knot-resolver/merge_requests/794>
       (branch extended_error
       <https://gitlab.labs.nic.cz/knot/knot-resolver/tree/extended_error>).

***** DONE > 4.1.5.  SERVFAIL Extended DNS Error Code 5 - DNSSEC Indeterminate
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2019-08-02 Fri 09:30]
      :END:
       >   The resolver attempted to perform DNSSEC validation, but validation
       >   ended in the Indeterminate state.  The R flag should not be set.

       Isn't there an error here? 4.1 is the section for NOERROR. What
       should be returned for DNSSEC Indeterminate? NOERROR or SERVFAIL? (In
       the first case, change the text, in the second, move this paragraph to
       4.2.)

       Now, implementation experience. We tested with Wireshark and dig (did
       not try to develop a client using the extended error code, just the server).

       As expected, producing extended error codes is quite simple and the
       draft is clear. The camel will be happy.

      + Response: With the recent removal of the RCODE binding, I
        think this problem goes away.  Correct?


***** DONE The biggest issue is of course to find out what to put in the extended
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2019-08-02 Fri 09:30]
      :END:
       error code. On some resolvers (at least on Knot), the place where the
       error is noticed can be quite far from the place where the answer is
       built, with its EDNS options. In practice, we had to add data to the
       request object, for the extended error information to be carried to
       the module that emits the extended error code EDNS option. So, the
       real difficulty is not in the draft, but in knowing and understanding
       your resolver.

      + Response: As agreed to in IETF105, we've removed the RCODE binding.

       Some details:

***** NOCHANGE * no resolver will use all the response-code/info-codes because some
           are never reached for this resolver, or are mixed with other
           issues. Generic errors (such as "SERVFAIL Extended DNS Error Code 1 -
           DNSSEC Bogus") are useful for when you cannot reliably find the problem.

      + Response: I'm not sure what change you're suggesting.  Removal
        of the binding may help, and I don't think there is an
        expectation that every implementation should be able to return
        every code.  I'd expect the union of all implementations to
        find the ability to return each code, but not each
        implementation itself?

***** DONE * the draft is silent about the laying out of bits in info-code. Not
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2019-08-02 Fri 09:33]
      :END:
           many IETF protocols have an integer field which is larger than a byte
           but not byte-aligned.

      + Response: Good point; added encoding rules (MSB)

***** TODO           * the draft has a passing mention that multiple extended error options
           are allowed but I don't see how it could be used by the poor client
           trying to figure out what happened. I suggest to disallow it.

***** NOCHANGE * the draft has (rightly so) two info-codes for NXDOMAIN/Blocked and
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2019-08-02 Fri 09:35]
      :END:
           NXDOMAIN/Censored but Knot cannot use it currently since the policy
           module (written in Lua) has no way today to be configured to express
           the difference. Not a problem in the draft but it will be probably a
           common case that the resolver cannot make use of *all*
           codes.

      + Response: Yep, per above I suspect different implementations
        may need to return different codes based on their
        implementation needs.  The point is to turn the right code to
        help users/debuggers.

***** NOCHANGE Let's end with a few examples:

           4.2.2.  SERVFAIL Extended DNS Error Code 2 - Signature Expired

           % dig  @::1 -p 9053 A servfail.nl         
           ...
           ;; ->>HEADER<<- opcode: QUERY, status: SERVFAIL, id: 12100
           ;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 1

           ;; OPT PSEUDOSECTION:
           ; EDNS: version: 0, flags: do; udp: 4096
           ; OPT=65500: 00 00 20 02 44 4e 53 53 45 43 20 65 78 70 69 72 65 64 20
           73 69 67 6e 61 74 75 72 65 73 (".. .DNSSEC expired signatures")
           ...


           4.2.7.  SERVFAIL Extended DNS Error Code 7 - No Reachable Authority

           % dig  @::1 -p 9053 A brk.internautique.fr
           ...
           ;; ->>HEADER<<- opcode: QUERY, status: SERVFAIL, id: 38620
           ;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 1

           ;; OPT PSEUDOSECTION:
           ; EDNS: version: 0, flags: do; udp: 4096
           ; OPT=65500: 80 00 20 07 6e 6f 20 4e 53 20 77 69 74 68 20 61 6e 20 61
           64 64 72 65 73 73 (".. .no NS with an address")
           ...

           (Not an ideal message but this is quite generic code in Knot.)


           4.5.1.  NXDOMAIN Extended DNS Error Code 1 - Blocked

           % dig  @::1 -p 9053 A googleanalytics.com 
           ...
           ;; ->>HEADER<<- opcode: QUERY, status: NXDOMAIN, id: 1189
           ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 2

           ;; OPT PSEUDOSECTION:
           ; EDNS: version: 0, flags: do; udp: 4096
           ; OPT=65500: 80 00 30 01 4e 6f 20 74 72 61 63 6b 69 6e 67 ("..0.No tracking")
           ;; QUESTION SECTION:
           ;googleanalytics.com.	IN A

           ;; AUTHORITY SECTION:
           googleanalytics.com.	10800 IN SOA googleanalytics.com. nobody.invalid. (
           				1          ; serial
           				3600       ; refresh (1 hour)
           				1200       ; retry (20 minutes)
           				604800     ; expire (1 week)
           				10800      ; minimum (3 hours)
           				)

           ;; ADDITIONAL SECTION:
           explanation.invalid.	10800 IN TXT "No tracking"

***** Shane Kerr

      Several folks have worked on implementing the
      draft-ietf-dnsop-extended-error at the IETF Hackthon yesterday and
      today. This is my own feedback on the draft based on trying to get it
      added to dnsdist.

      ----------------

      St√©phane Bortzmeyer pointed out that it wasn't clear how to encode the
      INFO-CODE into the 12 bits allocated to it. I think that the idea is
      that it should be represented in network (MSB) order, but probably it
      should be specified.

      ----------------

***** TODO       Minor suggestion: text for the descriptions should be consistent
      regarding capitalization. So:

      * Forged answer -> Forged Answer
      * DNSKEY missing -> DNSKEY Missing
      * RRSIGs missing -> RRSIGs Missing

      ----------------

***** TODO       For some reason NXDOMAIN(3)-specific codes are listed after
      NOTIMP(4)-specific and REFUSED(5)-specific codes in the draft. I think
      it would make more sense to just include these in order.

      ----------------

***** TODO       Numbering is a bit weird in section 4.1.3:

      4.1.3.  INFO-CODEs for use with RESPONSE-CODE: NOERROR(3)
      4.1.3.1.  NOERROR Extended DNS Error Code 3 - Stale Answer

      Probably the idea is just to have:

      4.1.3. NOERROR Extended DNS Error Code 3 - Stale Answer

      ----------------

***** DONE multiple RCODE issues
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2019-08-02 Fri 09:07]
      :END:

      + Response: The response code has been dropped, as  noted above

         RESPONSE-CODE:  3 (NOERROR)
         INFO-CODE:  3
         Purpose:  Answering with stale/cached data
         Reference:  Section 4.1.3.1
      -> should be RESPONSE-CODE 0

      ----------------

         RESPONSE-CODE:  2 (SERVFAIL)
         INFO-CODE:  7
         Purpose:  No NSEC records could be obtained
         Reference:  Section 4.2.8
      -> should be "No Reachable Authority", 4.2.7

      ----------------

      This code is missing in the table:

         RESPONSE-CODE:  2 (SERVFAIL)
         INFO-CODE:  8
         Purpose:  No NSEC records could be obtained
         Reference:  Section 4.2.8

      ----------------

         RESPONSE-CODE:  4 (NOTIMP)
         INFO-CODE:  1
         Purpose:
         Reference:  Section 4.4.2
      -> should be "Deprecated"

      ----------------

***** TODO       Finally, I note that the suggestion of requiring that the sender have
      some signal indicating that it is interested in extended errors was
      not adopted. I don't insist on it, but I think it would be useful to
      avoid bloating packets unnecessarily. It's a bit like the useless
      additional section data that lots of servers insist on appending to
      answers... why send something that will not be seen?

      OTOH I realize that having this information available may be useful
      for humans debugging things, even if the sender does not ask for it.

***** TODO       On the gripping hand, adding unasked-for information may have privacy
      implications. Possibly adding a "Privacy Considerations" section would
      be useful?

*** Ralph Dolmans

    I made an Extended DNS Errors implementation in Unbound during the
    IETF104 hackathon. Implementing the code that handles the errors was
    rather straightforward, the difficult part is (as St√©phane already
    pointed out) finding the right locations in the code for the individual
    errors. Some remarks regarding the draft:

***** TODO     Since it is possible to have multiple extended error options, is it
    expected to return all errors that match the result, or only the most
    specific one? For example: if a DNSSEC signatures is expired should both
    the "DNSSEC bogus" (SERVFAIL/Extended error 1) and the "Signature
    expired" (SERVFAIL/Extended error 2) be returned?

***** DONE I am not sure whether linking the info code to the rcode is a good idea.
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2019-08-02 Fri 09:09]
      :END:
    Some info codes can happen for different rcodes. It is in Unbound for
    example possible to block a domain by sending a REFUSED rcode, while the
    document list blocking only for the NXDOMAIN rcode. If the
    rcode/info-code coupling will remain then I would like to have the same
    info code for a specific error under different rcodes, for example
    always use info-code 1 for blocking.

      + Response: Per discussion at IETF105, the linking is now dropped.

***** TODO     Since EDNS is hop-by-hop, only error information from the resolver you
    are talking to is returned. There are cases when the interesting
    information is not in the first resolver. For example: if a resolver
    forwards queries to another one and the last one does DNSSEC validation
    then the resolver you are talking to does not generate the interesting
    information. Is it maybe an idea to add some text stating that extended
    error-aware resolvers should forward the received EDNS option?

***** TODO     I think having the extra information provided by this document is useful
    for debugging, and only for that. This extra information should not be
    used to make any DNS resolving decision, which makes the retry flag a
    bad idea. At the moment I don't have to trust all my secondaries as long
    as my zone is DNSSEC signed. The worst thing they can do is not return
    my data or tamper with it, in which case the validating resolver will
    ignore it and try another nameserver. Giving a nameserver the power to
    instruct a resolver to not try at another nameserver gives them the
    power to make my zone unavailable. This completely changes the current
    trust model. Please remove the retry flag from the document.

*** Evan Hunt 

    Stephane Bortzmeyer worked on implementing EDE in Knot the hackathon in Prague,
    and mentioned a few issues that came up:

***** TODO      1. INFO-CODE bit layout was a bit ambiguous as it's a 12-bit field and "byte
        order" isn't meaningful. The packet layout diagram helps, but we could help
        by specifing in the text that the combined response and info fields are two
        octets in network byte order, and RESPONSE-CODE is the most significant
        four bits and INFO-CODE is the least significant 12.
       
***** TODO      2. He requested the addition of a generic error code for SERVFAIL responses
        that don't fall into any defined category. For example, it's possible to
        configure Knot to send SERVFAIL as a result of a policy decision, which
        doesn't fall into any of the existing buckets, and it would seem silly to
        add a specific bucket for that.
       
***** TODO      3. Finally, he recommended removal of the suggestion in section 3.2 that
        multiple EDE records could be included with a response, and instead forbid
        it. It makes parsing harder, and it's unclear what to do if different codes
        contradict one another.
       
***** TODO      4. Incidental point that I noticed while checking the existing text: "The
        authors wish to thank...Evan
        Hunt" looks weird if I'm one of authors...
       
    -------------------------------------------------------------------------------

    You can view, comment on, or merge this pull request online at:

      https://github.com/wkumari/draft-wkumari-dnsop-extended-error/pull/5

    Commit Summary

      * address some feedback from the IETF hackathon in Prague
      * remove me from the thank you's, since I'm a coauthor
      * add a "Not Specified" SERVFAIL code

    File Changes

      * M draft-ietf-dnsop-extended-error.xml (41)

    Patch Links:

      * https://github.com/wkumari/draft-wkumari-dnsop-extended-error/pull/5.patch
      * https://github.com/wkumari/draft-wkumari-dnsop-extended-error/pull/5.diff

* Other stuff

ODO SHOULD all r flag suggestions


